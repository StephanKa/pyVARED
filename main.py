#!/usr/bin/python
#
# TODO: -

import os
import time
from registerDefinition import *
from vhdlFileParser import *
from generateTextRegisterMap import *
from generateHtmlRegisterMap import *
from generatePythonRegisterMap import *
from generateCRegisterMap import *

if __name__ == '__main__':
    begin_time = time.time()
    PATH = os.getcwd() + '/ip_repo'
    OUTPUT_FILENAME = 'hardware_register_map{0}'
    SEARCH_FILE_ENDING = 'S00_AXI.vhd'
    component_name = []
    # defines for the output files
    callable_classes = [GenerateCHeader, GeneratePythonModule, GenerateTextRegisterMap, GenerateHTMLMap]
    file_endings = [n.FILE_ENDING for n in callable_classes]
    # get all files in path
    list_all_files = os.walk(PATH)
    # we will delete existing files because of the appending from file in formation in one file
    # NOTE: It can simply be splitted, see the deepest for for-loop
    for temp_ending in file_endings:
        if(os.path.exists(OUTPUT_FILENAME.format(temp_ending))):
            os.remove(OUTPUT_FILENAME.format(temp_ending))
    # iterate through all files in current folder and only if autogenerated file was found
    # we parse the file for slave register defintions
    for (dir_path, dir_names, file_names) in list_all_files:
        for temp_file_name in file_names:
            if(SEARCH_FILE_ENDING in temp_file_name):
                # now parse this file for the definition we want (see at top of these file
                fops = FileParseOperation(dir_path + '/' + temp_file_name)
                # generate output_files with found information
                for temp_class in callable_classes:
                    temp_class(fops, OUTPUT_FILENAME)
                # save information for an overall view in html
                component_name.append([fops.component_name, fops.ip_core_version, fops.register])
    # generate index of all components
    if(os.path.exists(OUTPUT_FILENAME.format('.h'))):
        temp = open(OUTPUT_FILENAME.format('.h'), 'a')
        temp.write('#endif // {0}\n'.format(GenerateCHeader.INCLUDE_GUARD.format(OUTPUT_FILENAME.format("").upper())))
    if(component_name != []):
        GenerateComponentIndex(component_name, OUTPUT_FILENAME)
    print('Elapsed Time: {0}sec'.format(time.time() - begin_time))
