import os
from templateFileGeneration import *

class GeneratePythonModule(TemplateGeneration):
    
    FILE_ENDING = '.py'
    BIT_DEFINE_STRING = '\t\t\t("{2}", {1}),\n'
    GENERAL_REGISTER_DEFINITION = '\t{0} = {1} # {2}\n'
    REGISTER_BIT_INFORMATION = '\tclass {0}_MASK(int):\n\t\t_values = [\n{1}\t\t]\n{2}\n\n'
    COMPONENT_NAMING_AND_DEFINTION = 'class {0}(): # IP Core Version {1}\n{2}\n\n'
    AUTOGENERATION_HINT = '# This file is automatically generated, don''t modify it! #\n'
    
    def _extract_register_information(self):
        ''' extraction of the slave register and all including bits '''
        return_string = ''
        keylist = self.parsed_file.register.keys()
        keylist.sort()
        property_comment = '\t# this will add the property name to the class\n'
        for temp_reg in keylist:
            add_property = '{0}\tfor i, j in {1}_MASK._values:\n\t\tsetattr({1}, i, {1}(j))'.format(property_comment, self._extract_variable_name(temp_reg))
            return_string += self.GENERAL_REGISTER_DEFINITION.format(self._extract_variable_name(temp_reg), 
                                                                     self._calculate_register_offset(self.parsed_file.register[temp_reg].binary_coded[2:]), 
                                                                     self._extract_read_write_option(self.parsed_file.register[temp_reg].option))
            return_string += self.REGISTER_BIT_INFORMATION.format(self._extract_variable_name(temp_reg), 
                                                                  self._extract_bit_defintion(self.parsed_file.register[temp_reg].bit_definition), 
                                                                  add_property)
        return return_string
        
    def _write(self):
        ''' write the whole file '''
        self.output_file.write(self.AUTOGENERATION_HINT)
        out_string = self._extract_register_information()
        if(out_string == ''):
            out_string = '\tpass'
        self.output_file.write('class {0}(): # IP Core Version {1}\n{2}\n\n'.format(self.parsed_file.component_name, self.parsed_file.ip_core_version, out_string))